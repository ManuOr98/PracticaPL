package asint;

import java_cup.runtime.*;
import alex.AnalizadorLexicoPrFin;
import alex.UnidadLexica;
import alex.TokenValue;
import errors.GestionErroresPrFin;
import ast.*;
import ast.cabecera.*;
import ast.expresiones.*;
import ast.funciones.*;
import ast.instrucciones.*;
import ast.tipo.*;
import java.util.ArrayDeque;

scan with {: return getScanner().next_token(); :};

action code {:
   private OperacionesAS as = new OperacionesAS();
:};

parser code {: 
   private GestionErroresPrFin errores;
   public void syntax_error(Symbol unidadLexica) {
       errores.errorSintactico((UnidadLexica)unidadLexica);
   }
:};

init with {: 
   errores = new GestionErroresPrFin();
   AnalizadorLexicoPrFin alex = (AnalizadorLexicoPrFin)getScanner();
   alex.fijaGestionErrores(errores);
:};



terminal     TYPEDEF, STRUCT,

             FUNCTION, RETURN, VOID, NEW, MAIN

             IF, ELSE,
             WHILE, FOR, SWITCH, CASE
             BREAK, CONTINUE,
             CASE, DEFAULT,

             BOOLEAN, INTEGER, LIST, PUNT,
             TRUE, FALSE, NULL

             SUM, SUB, MULT, DIV, MOD
             
             MAYOR, MENOR, MENOROIGUAL, 
             MAYOROIGUAL, IGUAL, IGUALIGUAL, 
             NOIGUAL, AND, OR, NOT
             
             PARAPERTURA, PARCIERRE, 
             LLAVEAPERTURA, LLAVECIERRE,
             CORCHAPERTURA, CORCHCIERRE, 
             
             COMA, PUNTOCOMA, DOSPUNTOS, PUNTO,
             ASTERISCO, AMPERSAND, BARRABAJA;
             
terminal TokenValue NUM, IDEN, NOMBREFICHERO;

non terminal Exp Exp0, Exp1, Exp2, Exp3, Exp4, Exp5, Exp6, Exp7, Exp8;

// TIPOS
Tip ::= INT        
        {: RESULT = new Tipo(Tipos.INTEGER); :};

Tip ::= BOOLEAN 
        {: RESULT = new Tipo(Tipos.BOOLEAN); :};

Tip ::= PUNTERO MENOR Tip : t MAYOR
        {: RESULT = new TipoPuntero(t); :};

Tip ::= LISTA MENOR Tip : t COMA NUM: n MAYOR
        {: RESULT = new TipoLista(t, n.lexema()); :};

Tip ::= STRUCT IDEN : id
        {: RESULT = new TipoStruct(id.lexema()); :};

//EXPRESIONES

//OR
Exp0 ::= Exp0: exp1 OR Exp1: exp2
        {: RESULT = as.or(exp1, exp2); :};
Exp0 ::= Exp1: exp
        {: RESULT = exp; :};

//AND
Exp1 ::= Exp1: exp1 AND Exp2: exp2 
        {: RESULT = as.and(exp1, exp2); :};
Exp1 ::= Exp2 : exp
        {: RESULT = exp; :};

//NOT
Exp2 ::= NOT Exp2: exp2 
        {: RESULT = as.not(exp2); :};
Exp2 ::= Exp3 : exp
        {: RESULT = exp; :};

//IGUALDAD Y NO IGUALDAD
Exp3 ::= Exp3: exp1 IGUALIGUAL Exp4: exp2
        {: RESULT = as.igualdad(exp1, exp2); :};
Exp3 ::= Exp3: exp1 NOIGUAL Exp4: exp2
        {: RESULT = as.desigualdad(exp1, exp2); :};
Exp3 ::= Exp4: exp
        {: RESULT = exp; :};

//COMPARADORES
Exp4 ::= Exp4: exp1 MENOR Exp5: exp2
        {: RESULT = as.menor(exp1, exp2); :};
Exp4 ::= Exp4: exp1 MAYOR Exp5: exp2
        {: RESULT = as.mayor(exp1, exp2); :};
Exp4 ::= Exp4: exp1 MENOROIGUAL Exp5: exp2
        {: RESULT = as.menorOIgual(exp1, exp2); :};
Exp4 ::= Exp4: exp1 MAYOROIGUAL Exp5: exp2
        {: RESULT = as.mayorOIgual(exp1, exp2); :};
Exp4 ::= Exp5: exp
        {: RESULT = exp; :}; 

//OPERADORES ARITMÉTICOS
Exp5 ::= Exp5: exp1 SUMA Exp6: exp2           
        {: RESULT = as.suma(exp1, exp2); :};
Exp5 ::= Exp5: exp1 RESTA Exp6: exp2           
        {: RESULT = as.resta(exp1, exp2); :}; 
Exp5 ::= Exp6: exp           
        {: RESULT = exp; :};
        
Exp6 ::= Exp6: exp1 MULT Exp7: exp2           
        {: RESULT = as.multiplicacion(exp1, exp2); :};
Exp6 ::= Exp6: exp1 DIV Exp7: exp2           
        {: RESULT = as.division(exp1, exp2); :};
Exp6 ::= Exp6: exp1 MOD Exp7: exp2           
        {: RESULT = as.modulo(exp1, exp2); :};
Exp6 ::= Exp7: exp           
        {: RESULT = exp; :};

//CASOS BASE DE ENTEROS Y BOOLEANOS
Exp7 ::= NUM: cadenaNum           
        {: RESULT = as.num(cadenaNum.lexema()); :};
Exp7 ::= TRUE
        {: RESULT = as.true(); :};
Exp7 ::= FALSE
        {: RESULT = as.false(); :};
        













